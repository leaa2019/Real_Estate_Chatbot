from flask import Flask, request
import json
import requests

app = Flask(__name__)

# profile_elements = []

verify_token = 'my_voice_is_my_password_verify_me'
# This needs to be filled with the Page Access Token that will be provided
# by the Facebook App that will be created.
PAT = 'EAAc40Cs86ZBQBAIZBdZAY2Kst89xVorBhs7xxjD31HK8ZAPZB2RlEbdaDgJupNXbVxt4phokb62EWZCHWZBaJ3TCimlqT4LgapcfTBMnzPrExLaJ5GhnRLSocx3qcSzhqdxZBflslrHdwzbR26m2vXw8ncZBFBNWUmQPy41p8If7s2ZARvQZCGkWzrq'

# method to verify webhook
@app.route('/', methods=['GET'])
def handle_verification():
  	print ("Handling Verification.")
  	if request.args.get('hub.verify_token', '') == 'my_voice_is_my_password_verify_me':
  		print ("Verification successful!")
  		return request.args.get('hub.challenge', '')
  	else:
  		print ("Verification failed!")
  		return 'Error, wrong validation token'

# method that looks at the message that chatbot received.
@app.route('/', methods=['POST'])
def handle_messages():
	print ("Handling Messages")
	payload = request.get_data()
	for sender, message in messaging_events(payload):
		print ("Incoming from %s: %s" % (sender, message))
		print (payload)
		send_message(PAT, sender, message)
	return "ok"

def messaging_events(payload):
	"""Generate tuples of (sender_id, message_text) from the
	provided payload.
	"""
	data = json.loads(payload)
	messaging_events = data["entry"][0]["messaging"]
	for event in messaging_events:
	    if "message" in event and "text" in event["message"]:
		    yield event["sender"]["id"], event["message"]["text"].encode('unicode_escape')
	    else:
	    	yield event["sender"]["id"], "I can't echo this"

def send_message(token, recipient, text):
	"""Send the message text to recipient with id recipient.
	"""
	r = requests.post("https://graph.facebook.com/v2.6/me/messages",
	    params={"access_token": token},
	    data=json.dumps({
		    "recipient": {"id": recipient},
		    "message": {"text": text.decode('unicode_escape')}
		    }),
	    headers={'Content-type': 'application/json'})
	if r.status_code != requests.codes.ok:
  		print (r.text)

### IMPROV:
greeting = {
  	"setting_type":"greeting",
  	"greeting":{
  		"text":"Timeless apparel for the masses."
  	},
  	"sender": "1803113719726092",
  	"id": "1919137801500203",
  	"quick_replies": {
		"content_type":"text",
		"title":"quit",
		"image_url":"http://example.com/img/red.png",
		"payload":"<POSTBACK_PAYLOAD>"
	}
}
# I do not know whether the above is necessary...

# apparently this creates choices for quickresponses:
quit_qr = {
	"content_type":"text",
	"title":"quit",
	"image_url":"http://example.com/img/red.png",
	"payload":"<DEVELOPER_DEFINED_PAYLOAD>"
}

ok_qr = {
	"content_type":"text",
	"title":"ok",
	"image_url":"http://example.com/img/green.png",
	"payload":"<DEVELOPER_DEFINED_PAYLOAD>"
}

def welcome_message(token, recipient, text):
	"""Send the message text to recipient with id recipient.
	"""
	r = requests.post("https://graph.facebook.com/v2.6/me/messages",
	    params={"access_token": token},
	    data=json.dumps({
		    "recipient": {"id": recipient},
		    "message": {"text": text}
		    }),
	    headers={'Content-type': 'application/json'})
	if r.status_code != requests.codes.ok:
  		print (r.text)

# from Pycharm
bot_template = "BOT :"
user_template = "USER: "

start = True

if __name__ == '__main__':
  	# create 1 practice button / quick response. Then set!!!
  	messaging_events(greeting)
  	while start:
  		print(bot_template, "Hello, welcome to the otodom.pl chatbot. I am here to assist you in finding a real estate.")
  		print(bot_template, "1. To exit, type \"quit\" anytime.")
  		print(bot_template, "2. Say \"ok\" if you want to create a profile so that I can help you find the best possible "
	                        "real estate!")
  		welcome_message(PAT, "1803113719726092", "Hello, welcome to the otodom.pl chatbot. I am here to assist you in finding a real estate.")
  		# change the texts slightly so that it doesn't say "type" for example
  		welcome_message(PAT, "1803113719726092", "1. To exit, type \"quit\" anytime.")
  		welcome_message(PAT, "1803113719726092", "2. Say \"ok\" if you want to create a profile so that I can help you find the best possible real estate!")
	  	# create a new function that returns the text of the user the chatbot is talking to.
	  	# user = request.get_data()
	  	#Â print(user)
	  	start = False
  	# do I even need the line below in the end
  	app.run()
  	### below this is going to be the start of my chatbot code!
  	## try to get chatbot to send a welcome message USING NEW METHOD:
  	
if __name__ == '__main__':
	app.run(debug=True)
